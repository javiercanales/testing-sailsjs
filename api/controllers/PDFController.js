/**
 * PDFController - Test of modules to generate PDF and Excel files
 *
 * @description :: Server-side actions for handling incoming requests.
 * @help        :: See https://sailsjs.com/docs/concepts/actions
 */

/**
 * PDF libraries
 */
const Puppeteer = require('puppeteer');
const ejs = require('ejs');
const fs = require('fs');
const path = require('path');
const ejsPath = path.join(__dirname, '../../files/templateReport.ejs');

const data = require('./data.js').data;

/**
 * Services to handle requests.
 */
module.exports = {
    reportPDF: async function (req, res) {
        // We generate the PDF with some features with set() method
        columns = ["Name", "Age", "Car", "Branch", "Name 2", "age2", "car2", "branch2", "name3", "age3", "car3", "branch3"];

        business = {
            name: 'Novosystem SpA',
            address: 'Libertadores 1285',
            town: 'Maipu',
            city: 'Santiago'
        };
        user = {
            name: 'Charles ArÃ¡nguiz',
            module: 'Desarrollo web'
        };
        report = {
            title: 'Planilla',
            subtitle: 'Un subtitulo'
        };

        generatePDF(data, columns, business, user, report).then((pdf) => {
            res.set({
                'Content-Type': 'application/pdf',
                'Content-Length': pdf.length
            });
            res.status(200).send(pdf);
        });
        // Observation: the response data of the PDF it's a buffer type.
        // Some browsers will recognize the 'application/pdf' and open it for default with PDF.js (e.g. Chrome/Firefox/Edge-Chromium)
        // Others will not, then we have to convert the buffer data into a .PDF file in the front-end if needed.
    }
};


/**
 * This function generate a PDF file by printing an HTML document.
 * The HTML is generated by a EJS template (HTML with JS embebbed)
 * @param {*} data : the data for the report
 * @param {*} columns : the columns names that will be headers of the data (can be null)
 * @param {*} business : the business info for the report
 * @param {*} user : user that generates the report
 * @param {*} report : report's info: title and subtitle
 */
async function generatePDF(data, columns, business, user, report) {
    let d = new Date();
    const day = d.getDate();
    const month = d.getMonth() + 1; //Month starts from 0
    const year = d.getFullYear();
    const date = `${day}-${month}-${year}`;

    // Charging the EJS template, then render to HTML
    let templateEjs = fs.readFileSync(ejsPath, 'utf8');

    // This experimental value defines how many rows will be printer per page
    // It will depend of certain things of the HTML/CSS template, like padding or margins.
    const rowsPerPage = 25;

    // Get the number of pages, and distribute the data in parts per page
    const dataLength = data.length;
    const pages = Math.ceil(dataLength/rowsPerPage); // Round the value up

    let finalData = []; // The array that will contain arrays with the data for each page
    if (pages > 1) {
        for(i=0; i < pages; i++) {
            finalData.push(data.slice(rowsPerPage*i, rowsPerPage*(i+1)));
        }
    } else {
        finalData.push(data);
    }

    // Get the first element to get the headers (we use data and not finalData because it's the same)
    let keyHeaders = Object.keys(data[0]);

    // Define the name of header's columns, to generate the html body
    dataColumns = [];
    keyHeaders.forEach(header => {
        dataColumns.push(header);
    });

    // If there's no columns defined, we use the default names
    if(!columns) {
        columns = dataColumns;
    }

    let html;
    // Creates the HTML passing the request data (as example)
    html = ejs.render(templateEjs, {
        columns: columns,
        dataColumns: dataColumns,
        arrayData: finalData,
        business: business,
        user: user,
        date: date,
        report: report,
        pages: pages
    });
    fs.writeFileSync("./templateHTML.html", html, 'utf8');
    
    // Start the puppeteer API, headless
    const browser = await Puppeteer.launch({ 
        headless: true, 
        args: ['--no-sandbox'] 
    });
    const page = await browser.newPage();

    // Set the HTML to the puppeteer page, then the PDF (buffer) it's generated with some options
    await page.setContent(html);
    await page.addStyleTag({path: 'files/style.css'})
    const pdf = await page.pdf({
        format: 'A4',
        printBackground: true
    });

    // Close the puppeteer API and return the PDF buffer
    await browser.close();
    return pdf;
}